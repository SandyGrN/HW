'''
–í–∏–≤–µc—Ç–∏ –∑ API(–ø—Ä–∏–≤–∞—Ç —Ç–∞ –º–æ–Ω–æ) –∫—É—Ä—Å –≤–∞–ª—é—Ç –¥–ª—è:
USA
EURO
GBR
PLN
–°–≤–æ—é –≤–∞–ª—é—Ç—É
'''

import requests
res_monobank = requests.get('https://api.monobank.ua/bank/currency')
res_monobank.status_code
# for obj in res_monobank.json():
# print(f'Object is {obj}, \nType is{type(obj)}', end='\n\n')

my_currencies = {
    980: 'üá∫üá¶',
    840: 'üá∫üá∏',
    978: "üá™üá∫",
    826: 'üá¨üáß',
    985: 'üáµüá±',
    981: 'üá¨üá™'
}


my_rates = []
for obj in res_monobank.json():
    if obj['currencyCodeA'] in my_currencies and obj not in my_rates:
        my_rates.append(obj)


for obj in my_rates:
    if obj['rateCross'] != 0:
        print(f"–ö—Ä–∞—ó–Ω–∞: {my_currencies[obj['currencyCodeA']]} –ö—É—Ä—Å: {obj['rateCross']}")
    else:
        print(f"–ö—Ä–∞—ó–Ω–∞: {my_currencies[obj['currencyCodeA']]} –ö—É–ø—ñ–≤–ª—è: {obj['rateBuy']} –ü—Ä–æ–¥–∞–∂: {obj['rateSell']}")

# –ø—Ä–∏–≤–∞—Ç
res_privatbank = requests.get('https://api.privatbank.ua/p24api/pubinfo?exchange&coursid=5')
res_privatbank.status_code
res_privatbank.json()

new_currencies = {
    'USD': 'üá∫üá∏',
    'EUR': 'üá™üá∫',
}

for item in res_privatbank.json():
    print(f"–ö—Ä–∞—ó–Ω–∞: {new_currencies[item['ccy']]} –ö—É–ø—ñ–≤–ª—è {item['buy']} –ü—Ä–æ–¥–∞–∂: {item['sale']}")


'''
- –ù–∞–ø–∏—Å–∞—Ç–∏ Test  
- –í–∏–≤–µc—Ç–∏ –∫—É—Ä—Å –≤–∞–ª—é—Ç–∏ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
- –†–æ–±–∏—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–∞ status code
- –ù–∞–ø–∏—Å–∞—Ç–∏ —Ü–µ –≤ —Ñ—É–Ω–∫—Ü—ñ—é
- –ó–∞–ª–∏—Ç–∏ –Ω–∞ git(flake8 use, requirments, config.cfg)
'''


def exchange_rate() -> str:
    url = 'https://api.monobank.ua/bank/currency'
    txt = '–î–æ—Å—Ç—É–ø–Ω—ñ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: \n–¥–æ–ª–∞—Ä \n—î–≤—Ä–æ \n–∑–ª–æ—Ç–∏–π \n–ª–∞—Ä—ñ \n—Ñ—É–Ω—Ç —Å—Ç–µ—Ä–ª—ñ–Ω–≥—ñ–≤ \n—î–Ω–∞ \n—é–∞–Ω—å \n–¥–∏—Ä—Ö–∞–º'
    user_input = input(f'{txt} \n–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≤–∞–ª—é—Ç–∏: ').casefold()
    try:
        r = requests.get(url, timeout=3)
        r.raise_for_status()

        match user_input:
            case '–¥–æ–ª–∞—Ä':
                return (f"–í–∞–ª—é—Ç–∞: –î–æ–ª–∞—Ä –ö—É–ø—ñ–≤–ª—è: {r.json()[0]['rateBuy']} –ü—Ä–æ–¥–∞–∂: {r.json()[0]['rateSell']}")
            case '—î–≤—Ä–æ':
                return (f"–í–∞–ª—é—Ç–∞: –Ñ–≤—Ä–æ –ö—É–ø—ñ–≤–ª—è: {r.json()[1]['rateBuy']} –ü—Ä–æ–¥–∞–∂: {r.json()[1]['rateSell']}")
            case '—Ñ—É–Ω—Ç —Å—Ç–µ—Ä–ª—ñ–Ω–≥—ñ–≤':
                gpb = [i for i, d in enumerate(r.json()) if 826 in d.values()]
                return (f"–í–∞–ª—é—Ç–∞: –§—É–Ω—Ç –°—Ç–µ—Ä–ª—ñ–Ω–≥—ñ–≤ –ö—É—Ä—Å: {r.json()[int(gpb[0])]['rateCross']}")
            case '–ª–∞—Ä—ñ':
                gel = [i for i, d in enumerate(r.json()) if 981 in d.values()]
                return (f"–í–∞–ª—é—Ç–∞: –õ–∞—Ä—ñ  –ö—É—Ä—Å: {r.json()[int(gel[0])]['rateCross']}")
            case '–∑–ª–æ—Ç–∏–π':
                pln = [i for i, d in enumerate(r.json()) if 985 in d.values()]
                return (f"–í–∞–ª—é—Ç–∞: –ó–ª–æ—Ç–∏–π –ö—É—Ä—Å: {r.json()[int(pln[0])]['rateCross']}")
            case '—î–Ω–∞':
                jpy = [i for i, d in enumerate(r.json()) if 392 in d.values()]
                return (f"–í–∞–ª—é—Ç–∞: –Ñ–Ω–∞ –ö—É—Ä—Å: {r.json()[int(jpy[0])]['rateCross']}")
            case '—é–∞–Ω—å':
                cny = [i for i, d in enumerate(r.json()) if 156 in d.values()]
                return (f"–í–∞–ª—é—Ç–∞: –Æ–∞–Ω—å –ö—É—Ä—Å: {r.json()[int(cny[0])]['rateCross']}")
            case '–¥–∏—Ä—Ö–∞–º':
                aed = [i for i, d in enumerate(r.json()) if 784 in d.values()]
                return (f"–í–∞–ª—é—Ç–∞: –î–∏—Ä—Ö–∞–º –ö—É—Ä—Å: {r.json()[int(aed[0])]['rateCross']}")
            case _:
                return ('–ù–∞ –∂–∞–ª—å, –¥–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ üòî ')
    except requests.exceptions.RequestException as err:
        return ("OOps: Something Else", err)
    except requests.exceptions.HTTPError as errh:
        return ("Http Error:", errh)
    except requests.exceptions.ConnectionError as errc:
        return ("Error Connecting:", errc)
    except requests.exceptions.Timeout as errt:
        return ("Timeout Error:", errt)


print(exchange_rate())

# Practice
# 1. Create a program that will ask user to search a word.
# Search this word in Giphy (use their API).
# Return links to these GIFs as a result

from urllib import parse, request
import json

user_word = input('–í–≤–µ–¥—ñ—Ç—å –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç: ')
url = "http://api.giphy.com/v1/gifs/search"

params = parse.urlencode({
  "q": user_word,
  "api_key": "tF42CAOHLF05sp2hrJJ6Z0oUyxOpfPIo",
  "limit": "1"
})

with request.urlopen("".join((url, "?", params))) as response:
    data = json.loads(response.read())

result = []
for i in data['data']:
    result.append(i['url'])


print(''.join(result))

# 2. –í–∑—è—Ç–∏ API-weather, —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ —ñ –≤–∏–≤–µc—Ç–∏ –ø–æ–≥–æ–¥—É –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
# (–≤–≤–æ–¥–∏—Ç—å –ª–æ–∫–∞—Ü—ñ—é, –ø–æ —Ü—ñ–π –ª–æ–∫–∞—Ü—ñ—ó –ø–æ–≤–µ—Ä–Ω–µ—Ç—å—Å—è –ø–æ–≥–æ–¥–∞, –≤–æ–ª–æ–≥—ñ—Å—Ç—å —ñ —Ç–¥)
# https://openweathermap.org *–ü–æ—Ç—Ä—ñ–±–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–≤–æ–≥–æ api-–∫–ª—é—á–∞


api_key = '2209aeb64453cadeddb3f06b4296535a'
limit = 1
q = input('–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞: ')
geocoding = requests.get(f'http://api.openweathermap.org/geo/1.0/direct?q={q}&limit={limit}&appid={api_key}')

for i in geocoding.json():
    lat =i['lat']
    lon = i['lon']

res_weather = requests.get(f'https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={api_key}')
weather = res_weather.json()['weather'][0]['main']
temp = round(res_weather.json()['main']['temp'] - 273.15, 2)
feels_like = round(res_weather.json()['main']['feels_like'] - 273.15, 2)
humidity = res_weather.json()['main']['humidity']
print(f'{q}: \nWeatherüå§Ô∏è: {weather} \n Temperatureüå°Ô∏è: {temp} ¬∞–° \n Feels like üåì: {feels_like} ¬∞–° \n Humidityüíß: {humidity} %')


# 3. –í–∏–≤–µc—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Å–º–æ–Ω–∞–≤—Ç—ñ–≤(–∫—ñ–ª—å–∫—ñ—Å—Ç—å —ñ —ñ–º–µ–Ω–∞)
#  http://api.open-notify.org/astros.json

spaceman = requests.get('http://api.open-notify.org/astros.json')

names = []
for i in spaceman.json()['people']:
    names.append(i['name'])
print(f'–ö–æ—Å–º–æ–Ω–∞–≤—Ç–∏:', ' \n'.join(names), '\n–ö—ñ–ª—å–∫—ñ—Å—Ç—å: ', spaceman.json()['number'])
